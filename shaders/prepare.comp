#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 16, local_size_y = 16) in;

struct Vertex
{
    vec3 pos;
    float pad1;
    vec3 color;
    int index;
};

struct OptiVertex
{
    vec3 pos;
    uint color;
};

// Binding 0 : Shuffled buffer, input
layout(std140, binding = 0) buffer Shuffled
{
    OptiVertex shuffledVertices[];
};

// Binding 1: Reprojected storage buffer, output
layout(std140, binding = 1) buffer Reprojected
{
    Vertex reprojectedVertices[];
};

// Binding 2: Association Pixel / Vertex with the indices.
layout(binding = 2, r32i) uniform readonly iimage2D vertexIndexImage;

layout(binding = 3) uniform ScreenSize
{
    uint Width;
    uint Height;
}
screenSize;

vec3 UIntToVec3(uint i)
{
    vec4 v = unpackUnorm4x8(i);
    return vec3(v.r, v.g, v.b);
}

void main()
{
    uint x = min(gl_GlobalInvocationID.x, screenSize.Width);
    uint y = min(gl_GlobalInvocationID.y, screenSize.Height);
    int vertexIndex = imageLoad(vertexIndexImage, ivec2(x, y)).r;
    uint reprojIndex = screenSize.Width * y + x;

    if (vertexIndex == -1)
    {
        reprojectedVertices[reprojIndex].index = -1;
        reprojectedVertices[reprojIndex].pos = vec3(0, 0, 0);
        reprojectedVertices[reprojIndex].color = vec3(0, 0, 0);
    }
    else
    {
        reprojectedVertices[reprojIndex].pos = shuffledVertices[vertexIndex].pos;
        reprojectedVertices[reprojIndex].color = UIntToVec3(shuffledVertices[vertexIndex].color);
        // reprojectedVertices[reprojIndex].color = vec3(0,1,0);
        reprojectedVertices[reprojIndex].index = vertexIndex;
    }
}